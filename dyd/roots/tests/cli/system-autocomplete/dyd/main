#!/usr/bin/env bash

#
# turn this on to debug script
# set -x

#
# abort on error
# https://sipb.mit.edu/doc/safe-shell/
set -euf -o pipefail

SRC_DIR=$DYD_STEM
DEST_DIR=$DYD_BUILD

# # copying the assets to the build stem
# # ln -s $SRC_DIR/dyd/secrets $DEST_DIR/dyd/secrets

# # copying the secrets to the build stem
# ln -s $SRC_DIR/dyd/secrets $DEST_DIR/dyd/secrets

# # copying the assets to the build stem
# cp -rL $SRC_DIR/dyd/assets/. $DEST_DIR/dyd/assets/

# # add main
# ln -s $SRC_DIR/dyd/assets/main $DEST_DIR/dyd/main

# # link dependencies
# ln -s $SRC_DIR/dyd/stems/dryad $DEST_DIR/dyd/stems/dryad

_setup() {
	mkdir $DYD_BUILD/test
}

_prepare() {
	printf %s "false" > $DEST_DIR/dyd/traits/passed
}

_test() {
	COMMAND="dryad system autocomplete --"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="garden  root  roots  run  scope  scopes  script  scripts  secrets  sprouts  stem  stems  system  version "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi

	COMMAND="dryad system autocomplete -- r"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="root  roots  run "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi

	COMMAND="dryad system autocomplete -- ro"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="root  roots "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi

	COMMAND="dryad system autocomplete -- root"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="root  roots "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi

	COMMAND="dryad system autocomplete -- roots"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="roots "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi

	COMMAND="dryad system autocomplete -- root ''"
	OUTPUT=$(eval "$COMMAND")
	EXPECTED="build  copy  create  develop  link  move  path  replace  unlink "
	if [[ $OUTPUT != $EXPECTED ]]; then
		echo "[error] command ($COMMAND) output was ($OUTPUT), expected ($EXPECTED)" 1>&2;
		exit 1
	fi
}

_verify() {
	printf %s "true" > $DEST_DIR/dyd/traits/passed
}

_teardown() {
	rm -rf $DYD_BUILD/test
}

trap _teardown ERR EXIT
_setup
_prepare
_test
_verify
